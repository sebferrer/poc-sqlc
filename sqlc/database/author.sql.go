// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: author.sql

package database

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: createAuthor :one
INSERT INTO author (email, bio)
VALUES ($1, $2)
RETURNING id
`

type createAuthorParams struct {
	Email string
	Bio   sql.NullString
}

func (q *Queries) createAuthor(ctx context.Context, arg createAuthorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Email, arg.Bio)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteAuthor = `-- name: deleteAuthor :exec
DELETE FROM author
WHERE id = $1
`

func (q *Queries) deleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: getAuthor :one
SELECT id, email, bio
FROM author
WHERE id = $1
`

func (q *Queries) getAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Email, &i.Bio)
	return i, err
}

const updateAuthor = `-- name: updateAuthor :exec
UPDATE author
SET email = $1, bio = $2
WHERE id = $3
`

type updateAuthorParams struct {
	Email string
	Bio   sql.NullString
	ID    int32
}

func (q *Queries) updateAuthor(ctx context.Context, arg updateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.Email, arg.Bio, arg.ID)
	return err
}
