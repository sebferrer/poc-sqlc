// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book.sql

package database

import (
	"context"
	"time"
)

const createBook = `-- name: createBook :one
INSERT INTO book (title, publication_date, author_id)
VALUES ($1, $2, $3)
RETURNING id
`

type createBookParams struct {
	Title           string
	PublicationDate time.Time
	AuthorID        int32
}

func (q *Queries) createBook(ctx context.Context, arg createBookParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.PublicationDate, arg.AuthorID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBook = `-- name: deleteBook :exec
DELETE FROM book
WHERE id = $1
`

func (q *Queries) deleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: getBook :one
SELECT id, title, publication_date, author_id
FROM book
WHERE id = $1
`

func (q *Queries) getBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}

const updateBook = `-- name: updateBook :exec
UPDATE book
SET title = $1, publication_date = $2, author_id = $3
WHERE id = $4
`

type updateBookParams struct {
	Title           string
	PublicationDate time.Time
	AuthorID        int32
	ID              int32
}

func (q *Queries) updateBook(ctx context.Context, arg updateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.Title,
		arg.PublicationDate,
		arg.AuthorID,
		arg.ID,
	)
	return err
}
